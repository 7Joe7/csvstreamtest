// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common/service/importer.proto

package rpc

import (
	fmt "fmt"
	model "github.com/7joe7/csvstreamtest/common/model"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("common/service/importer.proto", fileDescriptor_42fe5363db26641f) }

var fileDescriptor_42fe5363db26641f = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8e, 0x31, 0x0b, 0xc2, 0x40,
	0x0c, 0x85, 0x15, 0x41, 0xa4, 0xd0, 0xa5, 0x6e, 0x15, 0x07, 0x9d, 0x14, 0xe1, 0x0e, 0x74, 0xe8,
	0x6e, 0x27, 0x57, 0x47, 0xb7, 0xf6, 0x0c, 0xf5, 0xa4, 0x69, 0x8e, 0x24, 0xf6, 0xf7, 0x8b, 0xbd,
	0x9b, 0x5c, 0x42, 0x1e, 0xf9, 0xf8, 0xf2, 0xb2, 0xad, 0x23, 0x44, 0x1a, 0xac, 0x00, 0x8f, 0xde,
	0x81, 0xf5, 0x18, 0x88, 0x15, 0xd8, 0x04, 0x26, 0xa5, 0x62, 0xc1, 0xc1, 0x95, 0x9b, 0xc4, 0x20,
	0x88, 0x34, 0x1d, 0x58, 0xd7, 0x7b, 0x18, 0x34, 0x12, 0xe5, 0xee, 0xef, 0x18, 0x05, 0x0c, 0xbf,
	0x19, 0x91, 0x73, 0x9d, 0xad, 0x6e, 0x49, 0x5b, 0x54, 0x59, 0x1e, 0xf7, 0x7a, 0x92, 0x48, 0x91,
	0x1b, 0xa4, 0x27, 0xf4, 0x26, 0xe6, 0x72, 0x9d, 0x62, 0x84, 0xee, 0x93, 0x66, 0x3f, 0x3b, 0xcc,
	0xaf, 0xa7, 0xc7, 0xb1, 0xf3, 0xfa, 0xfa, 0xb4, 0xc6, 0x11, 0xda, 0xea, 0x4d, 0x50, 0x59, 0x27,
	0xa3, 0x28, 0x43, 0x83, 0x0a, 0xa2, 0x36, 0x15, 0xe1, 0xe0, 0xda, 0xe5, 0xf4, 0xf8, 0xf2, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x37, 0x9a, 0xb6, 0xe7, 0xde, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ImporterClient is the client API for Importer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ImporterClient interface {
	ImportClients(ctx context.Context, opts ...grpc.CallOption) (Importer_ImportClientsClient, error)
}

type importerClient struct {
	cc *grpc.ClientConn
}

func NewImporterClient(cc *grpc.ClientConn) ImporterClient {
	return &importerClient{cc}
}

func (c *importerClient) ImportClients(ctx context.Context, opts ...grpc.CallOption) (Importer_ImportClientsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Importer_serviceDesc.Streams[0], "/rpc.Importer/ImportClients", opts...)
	if err != nil {
		return nil, err
	}
	x := &importerImportClientsClient{stream}
	return x, nil
}

type Importer_ImportClientsClient interface {
	Send(*model.Client) error
	CloseAndRecv() (*model.ImportReport, error)
	grpc.ClientStream
}

type importerImportClientsClient struct {
	grpc.ClientStream
}

func (x *importerImportClientsClient) Send(m *model.Client) error {
	return x.ClientStream.SendMsg(m)
}

func (x *importerImportClientsClient) CloseAndRecv() (*model.ImportReport, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(model.ImportReport)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImporterServer is the server API for Importer service.
type ImporterServer interface {
	ImportClients(Importer_ImportClientsServer) error
}

func RegisterImporterServer(s *grpc.Server, srv ImporterServer) {
	s.RegisterService(&_Importer_serviceDesc, srv)
}

func _Importer_ImportClients_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImporterServer).ImportClients(&importerImportClientsServer{stream})
}

type Importer_ImportClientsServer interface {
	SendAndClose(*model.ImportReport) error
	Recv() (*model.Client, error)
	grpc.ServerStream
}

type importerImportClientsServer struct {
	grpc.ServerStream
}

func (x *importerImportClientsServer) SendAndClose(m *model.ImportReport) error {
	return x.ServerStream.SendMsg(m)
}

func (x *importerImportClientsServer) Recv() (*model.Client, error) {
	m := new(model.Client)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Importer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Importer",
	HandlerType: (*ImporterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ImportClients",
			Handler:       _Importer_ImportClients_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "common/service/importer.proto",
}
