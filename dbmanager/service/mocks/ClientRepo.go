// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	"github.com/7joe7/csvstreamtest/common/model"
	"github.com/7joe7/csvstreamtest/dbmanager/repository"
	"github.com/stretchr/testify/mock"
)

// ClientRepo is an autogenerated mock type for the ClientRepo type
type ClientRepo struct {
	mock.Mock
}

// Commit provides a mock function with given fields:
func (_m *ClientRepo) Commit() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *ClientRepo) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: clientIDs
func (_m *ClientRepo) Find(clientIDs []uint) ([]*model.Client, error) {
	ret := _m.Called(clientIDs)

	var r0 []*model.Client
	if rf, ok := ret.Get(0).(func([]uint) []*model.Client); ok {
		r0 = rf(clientIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]uint) error); ok {
		r1 = rf(clientIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWithTransaction provides a mock function with given fields:
func (_m *ClientRepo) NewWithTransaction() (repository.ClientRepo, error) {
	ret := _m.Called()

	var r0 repository.ClientRepo
	if rf, ok := ret.Get(0).(func() repository.ClientRepo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.ClientRepo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Retrieve provides a mock function with given fields: id
func (_m *ClientRepo) Retrieve(id int32) (*model.Client, error) {
	ret := _m.Called(id)

	var r0 *model.Client
	if rf, ok := ret.Get(0).(func(int32) *model.Client); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with given fields:
func (_m *ClientRepo) Rollback() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store provides a mock function with given fields: client
func (_m *ClientRepo) Store(client *model.Client) error {
	ret := _m.Called(client)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Client) error); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: newClient
func (_m *ClientRepo) Update(newClient *model.Client) error {
	ret := _m.Called(newClient)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Client) error); ok {
		r0 = rf(newClient)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
